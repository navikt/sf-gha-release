name: "Release"
description: "Release a package to a target org"
inputs:
  release_tag:
    description: "Optional: Specify a release tag to use instead of the latest"
    default: ''
    required: false
  loglevel:
    description: "Optional: Specify the log level"
    default: 'INFO'
    required: false
  devhub_alias:
    description: "Specify the devhub alias"
    default: 'devhub'
    required: true
  target_org_alias:
    description: "Specify the target org alias"
    default: ''
    required: true
  releaseNamePrefix:
    description: "Specify the release name prefix"
    default: 'sf'
    required: true
  auth_token:
    description: "Authentication token"
    default: ''
    required: true
runs:
  using: "composite"
  steps:
    - name: Determine release tag
      id: release
      run: |
        if [ -z "${INPUT_RELEASE_TAG}" ]; then
          latest_tag=$(curl -s \
            -H "Accept: application/vnd.github+json" \
            -H "Authorization: token ${AUTH_TOKEN}" \
            -H "X-GitHub-Api-Version: 2022-11-28" \
            https://api.github.com/repos/${REPO}/releases/latest \
          | jq -r '.tag_name')
          
          echo "Latest release tag: $latest_tag"
        else
          latest_tag=${INPUT_RELEASE_TAG}
        fi

        if [ -z "$latest_tag" ]; then
          echo "::error::No latest release found for repository ${REPO}"
          exit 1
        fi

        latest_tag=$(echo "$latest_tag" | tr -d '\n')

        if [[ ! "$latest_tag" =~ ^$RELEASE_NAME_PREFIX[0-9]{13,14}$ ]]; then
          echo "::error::Invalid release name format: $latest_tag. Expected format: $RELEASE_NAME_PREFIX<timestamp>"
          exit 1
        fi

        echo "releaseTag="$latest_tag" >> $GITHUB_OUTPUT
      shell: bash
      env:
        INPUT_RELEASE_TAG: ${{ inputs.release_tag  }}
        AUTH_TOKEN: ${{ inputs.auth_token }}
        REPO: ${{ github.repository }}
        RELEASE_NAME_PREFIX: ${{ inputs.releaseNamePrefix }}

    - name: Checkout
      uses: actions/checkout@11bd71901bbe5b1630ceea73d27597364c9af683
      with:
        ref: ${{ steps.release.outputs.releaseTag }}
        persist-credentials: false

    - name: Get release asset URL
      id: asset
      run: |
        asset_url=$(curl -s \
          -H "Accept: application/vnd.github+json" \
          -H "Authorization: token ${AUTH_TOKEN}" \
          -H "X-GitHub-Api-Version: 2022-11-28" \
          https://api.github.com/repos/${REPO}/releases/tags/${RELEASE_TAG} \
        | jq -r '.assets[] 
        | select(.name | test("sf-platform_.*\\.yml")) 
        | .browser_download_url')

        if [ -z "$asset_url" ]; then
          echo "::error::No asset matching 'sf-platform_.*\\.yml' found for release ${RELEASE_TAG}"
          exit 1
        fi
        echo "url=$asset_url" >> $GITHUB_OUTPUT
      shell: bash
      env:
        AUTH_TOKEN: ${{ inputs.auth_token }}
        REPO: ${{ github.repository }}
        RELEASE_TAG: "${{ steps.release.outputs.releaseTag }}"

    - name: Download release asset
      run: |
        curl -L -o release_file.yml \
          -H "Accept: application/vnd.github+json" \
          -H "Authorization: token ${AUTH_TOKEN}" \
          -H "X-GitHub-Api-Version: 2022-11-28" \
          ${ASSET_URL}

        echo "File contents:"
        cat release_file.yml
      shell: bash
      env:
        AUTH_TOKEN: ${{ inputs.auth_token }}
        ASSET_URL: "${{ steps.asset.outputs.url }}"
        RELEASE_TAG: "${{ steps.release.outputs.releaseTag }}"

    - name: Release to Org
      run: |
        sfp release --releasedefinition release_file.yml \
          --targetorg ${TARGET_ORG_ALIAS} \
          --devhubalias ${DEVHUB_ALIAS} \
          --npm \
          --scope ${SCOPE} \
          --loglevel ${SFP_LOG_LEVEL}
      shell: bash
      env:
        SFP_LOG_LEVEL: ${{ inputs.loglevel }}
        SCOPE: ${{ github.repository_owner }}
        TARGET_ORG_ALIAS: ${{ inputs.target_org_alias }}
        DEVHUB_ALIAS: ${{ inputs.devhub_alias }}
        AUTH_TOKEN: ${{ inputs.auth_token }}
